
This is ubf-thrift, a framework for integrating UBF, TBF, and Thrift.
This repository depends on the ubf open source repository.


To build
========

1. Get and install an erlang system
   http://www.erlang.org

   NOTE: UBF requires Erlang/OTP R13B01 or newer.  UBF has been tested
   most recently with Erlang/OTP R13B04.

2. Get and install ubf
   http://github.com/norton/ubf
   
3. Change to the src directory and type make
   $ cd src
   $ make

4. Run the unit test
   $ make check


**NOTE**

Before make, edit "src/Makefile" to change the "MY_UBF_EBIN" variable
to point to where the ebin directory that contains ubf's .beam files
and the "MY_UBF_INCLUDE" variable to point to where the include
directory that contains ubf's .hrl files.  Then run "make".
   
   
Documentation -- Where should I start?
======================================

This README is a good first step.  Check out and build using the "To
build" instructions above.

Eunit tests can be found in the Unit-EUnit-Files directory.  These
tests illustrate a generic module that uses UBF's contract manager for
checking Thrift requests and responses.


What is UBF?
============

UBF is the "Universal Binary Format", designed and implemented by Joe
Armstrong.  See http://www.sics.se/~joe/ubf.html for full details.  A
really short summary:

   * UBF(A) is a protocol above a stream transport (e.g. TCP/IP), for
     encoding structured dataroughly equivalent to well-formed XML.

   * UBF(B) is a programming langauge for describing types in UBF(A)
     and protocols between clients and servers. UBF(B) is roughly
     equivalent to to Verified XML, XML-schemas, SOAP and WDSL.

     
What is Thrift?
===============

Thrift is a remote procedure call protocol.  See
http://incubator.apache.org/thrift/ for full details.


Credits
=======

Many, many thanks to Joe Armstrong, UBF's designer and original
implementor.

Gemini Mobile Technologies, Inc. has approved the release of this
repository under an MIT license.
